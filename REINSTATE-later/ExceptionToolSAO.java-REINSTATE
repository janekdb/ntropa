/*
 * Created on 26-Nov-2004
 *
 * ExceptionToolSAO
 */
package com.studylink.sao.common;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import com.studylink.app.channel.ServiceLocator;
import com.studylink.app.error.ExceptionTool;
import com.studylink.sao.BaseServerActiveObject;
import com.studylink.sao.InvocationContext;

/**
 * Use this SAO on a page marked as an error page.
 * @author Janek Bogucki
 *
 * @version $Id: ExceptionToolSAO.java,v 1.2 2004/12/11 10:42:10 jdb Exp $
 */
public class ExceptionToolSAO extends BaseServerActiveObject {

	private static final String TL_REFERENCE_KEY = "reference";
	private static final String TL_EXCEPTION_TOOL_KEY = "exception-tool";

	public void control(InvocationContext icb) {

		try {
			HttpServletRequest request = icb.getHttpServletRequest();

			String reference = "nav-err-ref:" + new Date().getTime();
			setThreadLocalValue(TL_REFERENCE_KEY, reference);

			Throwable throwable = getThrowable(request);
			String initialUri = getInitialUri(request);

			ExceptionTool tool = ServiceLocator.getServiceLocator(request).getExceptionTool(request);
			setThreadLocalValue(TL_EXCEPTION_TOOL_KEY, tool);

			tool.record(throwable, initialUri, reference);
		} catch (Throwable t) {
			System.out.println(t);
		}
	}

	public void render(InvocationContext icb) throws Exception {

		try {

			HttpServletRequest request = icb.getHttpServletRequest();

			Throwable throwable = getThrowable(request);

			//TODO: this does not belong here. Use the exception mapping Servlet configuration options instead.
			/*
			 * org.odmg.TransactionNotInProgressException: when a transaction obtained from a closed database is used.
			 * org.odmg.DatabaseClosedException:           when a course profile is displayed. (Don't know why this is different yet)
			 */
			if ((throwable instanceof org.odmg.TransactionNotInProgressException)
				|| (throwable instanceof org.odmg.DatabaseClosedException)) {
				icb.getJspWriter().write(
					"This section of the web site is undergoing maintenance. Please try again in a few minutes");
				return;
			}

			ExceptionTool tool = (ExceptionTool) getThreadLocalValue(TL_EXCEPTION_TOOL_KEY);

			String reference = (String) getThreadLocalValue(TL_REFERENCE_KEY);

			icb.getJspWriter().write("<p>There was a an internal fault. We apologise for this inconvenience.</p>");
			icb.getJspWriter().write("<p>The reference code for this error is: <b>" + reference + "</b>");

			if (tool.showDetails()) {
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				PrintStream ps = new PrintStream(baos);

				throwable.printStackTrace(ps);

				String st = baos.toString("iso-8859-1");
				icb.getJspWriter().write("<pre>\n" + st + "\n</pre>");
			}

		} catch (Throwable t) {
			System.out.println(t);
		}
	}

	// See: http://servlets.com/soapbox/servlet23.html
	private Throwable getThrowable(HttpServletRequest request) {
		//return (Throwable) request.getAttribute("javax.servlet.error.exception");
		// Found this String by looking in the debugger
		return (Throwable) request.getAttribute("javax.servlet.jsp.jspException");
	}

	// See: http://servlets.com/soapbox/servlet23.html
	private String getInitialUri(HttpServletRequest request) {
		return (String) request.getAttribute("javax.servlet.error.request_uri");
	}

}
